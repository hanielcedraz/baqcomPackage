logFolder <- 'logFolder'
if (!file.exists(file.path(logFolder))) dir.create(file.path(logFolder), recursive = TRUE, showWarnings = FALSE)
# report_folder <- 'reportmiRbaqcomQC-umiTools'
# if (!file.exists(file.path(paste0(reports,'/',report_folder)))) dir.create(file.path(paste0(reports,'/',report_folder)), recursive = TRUE, showWarnings = FALSE)
#
# #Creating Fastqc plots before Quality Control
# beforeQC <- 'FastQCBefore'
# if (opt$fastqc) {
#     write(paste("Start fastqc - FastQCBefore"), stderr())
#     if (!file.exists(file.path(paste0(reports,'/', beforeQC)))) dir.create(file.path(paste0(reports,'/', beforeQC)), recursive = TRUE, showWarnings = FALSE)
#     fastq.defore <- mclapply(qcquery, function(index){
#         try({
#             system(
#                 paste('fastqc',
#                       paste0(opt$Raw_Folder, '/',index$sampleName,'*'),
#                       #paste0(opt$Raw_Folder, '/',index$R2),
#                       ' -o ',
#                       paste0(reports,'/', beforeQC),
#                       '-t', opt$sampleToprocs
#                 )
#             )
#         })
#     }, mc.cores = opt$sampleToprocs)
#     # for (i in samples[,1]) {
#     #         system2('fastqc',
#     #                paste0(opt$Raw_Folder, '/', i,'*', ' -o ', paste0(reports,'/', beforeQC), ' -t ', opt$sampleToprocs))
#     #     }
# }
## create output folder
# output_Folder <- opt$output
# if (opt$umiCommand == "extract") {
#     extractedFolder <- paste0(output_Folder, "/00-extracted")
#     if (!file.exists(file.path(extractedFolder))) {
#         dir.create(file.path(extractedFolder), recursive = TRUE, showWarnings = FALSE)
#     }
# } else if (opt$umiCommand == "dedup") {
#     dedupFolder <- paste0(output_Folder, "/01-deduplicated")
#     if (!file.exists(file.path(dedupFolder))) {
#         dir.create(file.path(dedupFolder), recursive = TRUE, showWarnings = FALSE)
#     }
# } else if (opt$umiCommand == "group") {
#     dedupFolder <- paste0(output_Folder, "/02-grouped")
#     if (!file.exists(file.path(dedupFolder))) {
#         dir.create(file.path(dedupFolder), recursive = TRUE, showWarnings = FALSE)
#     }
# }
####################
### GENOME GENERATE
####################
#gtf <- if(file.exists(opt$gtfTarget)){paste('--sjdbGTFfile', opt$gtfTarget)}
# index_Folder <- "/Users/haniel/Documents/BAQCOM/examples/genome/index_BOWTIE"
#opt$mappingTarget <- "/Users/haniel/Documents/BAQCOM/examples/genome/Sus.Scrofa.chr1.genome.dna.toplevel.fa"
#index_Folder <- paste0(dirname(opt$mappingTarget), '/', 'index_', toupper(opt$mappingProgram), '/')
index_Folder <- dirname(opt$mappingTarget)
# if (!file.exists(file.path(paste(index_Folder, '/', 'Genome', sep = ''))))
# {
#     dir.create(file.path(index_Folder), recursive = TRUE, showWarnings = FALSE)
# }
if (!file.exists(index_Folder)) {
dir.create(file.path(index_Folder), recursive = TRUE, showWarnings = FALSE)
}
#bowtie <- "/Users/haniel/miniconda3/bin/bowtie"
#"bowtie-build" <- "/Users/haniel/miniconda3/bin/bowtie-build"
indexBuiding <- function(program, mappingTarget, index_Folder) {
if (program == "bowtie") {
try({
system(
paste(
"bowtie-build",
mappingTarget,
paste0(index_Folder, "/", opt$indexBaseName)
)
)
})
} else if (program == "bowtie2") {
try({
system(
paste(
"bowtie-build",
mappingTarget,
index_Folder
)
)
})
} else if (program == "bwa") {
try({
system(
glue(
"bwa index",
mappingTarget,
index_Folder,
.sep = " "
)
)
})
}
}
#index_genom <- star.index.function()
#tools::list_files_with_exts(index_Folder, exts = "ebwt")
# if (!all(file.exists(list_files_with_exts(index_Folder, exts = "ebwt")))) {
#
#     index_genom <- indexBuiding(program = opt$mappingProgram, opt$mappingTarget, index_Folder)
# }
userInput <- function(question) {
cat(question)
con <- file("stdin")
on.exit(close(con))
n <- readLines(con, n = 1)
return(n)
}
# if (!(userInput("Would you like to delete and re-run index generation? (yes or no) ") %in% c("yes", "no"))) {
#   cat('\n')
#   write(paste('May have a mistake with the argument in -s parameter. Please verify if the argument is written in the right way'), stderr())
#   stop()
# }
if (opt$indexBuild) {
if (!all(file.exists(list_files_with_exts(index_Folder, exts = "ebwt")))){
write(glue("\n\n {str_dup('-', 100)} \n\n {str_dup(' ', 40)} Buiding genome started \n\n {str_dup('-', 100)} \n\n"), stdout())
index_genom <- indexBuiding(program = opt$mappingProgram, opt$mappingTarget, index_Folder)
write(glue("\n\n {str_dup('-', 100)} \n\n {str_dup(' ', 40)} Buiding genome finished \n\n {str_dup('-', 100)} \n\n"), stdout())
} else{
write(paste("Index genome files already exists."), stderr())
repeat {
inp <- userInput("Would you like to delete and re-run index generation? ([yes] or no) ")
#imp <- "yes"
if (inp %in% c("yes", "no", "", "Y", "y", "N", "n")) {
write(glue("\n\n Buiding genome skiped \n\n"), stdout())
break()
} else {
write("Specify 'yes' or 'no'", stderr())
}
}
if (any(inp %in% c("yes", "", "Y", "y"))) {
write(glue("\n\n {str_dup('-', 100)} \n\n {str_dup(' ', 40)} Buiding genome started \n\n {str_dup('-', 100)} \n\n"), stdout())
index_genom <- indexBuiding(program = opt$mappingProgram, opt$mappingTarget, index_Folder)
write(glue("\n\n {str_dup('-', 100)} \n\n {str_dup(' ', 40)} Buiding genome finished \n\n {str_dup('-', 100)} \n\n"), stdout())
}
}
}
#Mapping
#pigz <- system('which pigz 2> /dev/null', ignore.stdout = TRUE, ignore.stderr = TRUE)
# bowtie -S -p 8 /Users/haniel/Documents/BAQCOM/examples/genome/genome 00-Fastq/SRR13450790_SE_001.fastq > bowtieTest
indexFiles <- paste0(index_Folder, "/", opt$indexBaseName)
index_Folder
MappingQuery
#opt$cleanedFolder <- "00-Fastq/"
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz",
libraryType = opt$libraryType,
step = "Mapping"
)
samples <- baqcomPackage::loadSamplesFile(
file = opt$samplesFile,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, libraryType = opt$libraryType
)
opt$cleanedFolder
samples <- baqcomPackage::loadSamplesFile(
file = opt$samplesFile,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, libraryType = opt$libraryType
)
opt$samplesFile
getwd()
setwd("~/OneDrive/posDoc/miRbaqcom")
samples <- baqcomPackage::loadSamplesFile(
file = opt$samplesFile,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, libraryType = opt$libraryType
)
write(
glue("\n\n {str_dup('-', 100)} \n\n "),
stdout()
)
write(glue("\n\n {str_dup('*', 40)}"), stdout())
procs <- baqcomPackage::prepareCore(nThreads = opt$procs)
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz",
libraryType = opt$libraryType,
step = "Mapping"
)
MappingQuery
opt$cleanedFolder
createSampleList <- function(samples, reads_folder, column = "SAMPLE_ID", fileType = NULL, libraryType = "pairEnd", samplesFromSTAR = FALSE, step = NULL) {
sampleList <- list()
samples <- as.data.frame(samples)
aceptedFileTypes <- c("fastq.gz", "bam", "sam")
if (!is.null(fileType)) {
if (!fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'fastq', 'bam' or 'sam'"))
}
}
aceptedLibraryType <- c("pairEnd", "singleEnd")
if (!libraryType %in% aceptedLibraryType) {
stop(glue("Library type ({libraryType}) not found, please provide one of 'pairEnd' or 'singleEnd'"))
}
if (!file.exists(reads_folder)) {
stop(glue("reads_folder {reads_folder} does not exist\n"))
}
### column SAMPLE_ID should be the sample name
### rows can be commented out with #
if (libraryType == "pairEnd") {
if (!all(c(column, "Read_1", "Read_2") %in% colnames(samples))) {
stop(glue("Expecting the three columns {column}, Read_1 and Read_2 in samples file (tab-delimited)\n"))
}
}
if (!is.null(fileType)) {
if (fileType == "fastq.gz") {
if (libraryType == "pairEnd") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
if (step == "QualityControl") {
map <- lapply(c("_R1","_R2"), grep, x = reads, value = TRUE)
names(map) <- c("R1","R2")
map$sampleName <-  samples[i,column]
map$R1 <- samples[i,2]
map$R2 <- samples[i,3]
sampleList[[paste(map$sampleName)]] <- map
#sampleList[[paste(map$sampleName)]]
} else if (step == "Mapping") {
map <- lapply(c("_PE1", "_PE2", "_SE1", "_SE2"), grep, x = reads, value = TRUE)
names(map) <- c("PE1", "PE2", "SE1", "SE2")
map$sampleName <-  samples[i,column]
map$PE1 <- map$PE1[i]
map$PE2 <- map$PE2[i]
map$SE1 <- map$SE1[i]
map$SE2 <- map$SE2[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
} else if (libraryType == "singleEnd") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
if (any(step %in% c("QualityControl", "Mapping"))) {
map <- lapply(c("trim_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
#map$SE <- map$SE[i]
map$SE <- samples[i,2]
sampleList[[paste(map$sampleName)]] <- map
#sampleList[[paste(map$sampleName)]]
}
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
}
} else if (fileType == "bam") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "bam$", full.names = TRUE)
map <- lapply(c("_sam_sorted_pos.bam"), grep, x = reads, value = TRUE)
names(map) <- c("bam_sorted_pos")
map$sampleName <-  samples[i,column]
map$bam_sorted_pos <- map$bam_sorted_pos[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
} else if (fileType == "sam") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
names(map) <- c("unsorted_sample")
map$sampleName <-  samples[i,column]
map$unsorted_sample <- map$unsorted_sample[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
}
}
if (is.null(fileType) & samplesFromSTAR == TRUE) {
# if (is.null(starFolder)) {
#   stop(glue("{starFolder} cannot be null, please provide a valid name for the STAR results folder"))
# }
#reads_folder <- starFolder
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = ".bam$", full.names = TRUE)
map <- lapply(c("_Aligned.sortedByCoord.out.bam"), grep, x = reads, value = TRUE)
names(map) <- c("Aligned.sortedByCoord.out")
map$sampleName <-  samples[i,column]
map$Aligned.sortedByCoord.out <- map$Aligned.sortedByCoord.out[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up", length(sampleList), "jobs"),stdout())
return(sampleList)
}
return(sampleList)
}
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz",
libraryType = opt$libraryType,
step = "Mapping"
)
MappingQuery
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz",
libraryType = opt$libraryType
)
MappingQuery
opt$libraryType
reads_folder
reads_folder <- "01-CleanedReads/"
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
reads
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
if (any(step %in% c("QualityControl", "Mapping"))) {
map <- lapply(c("trim_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
#map$SE <- map$SE[i]
map$SE <- samples[i,2]
sampleList[[paste(map$sampleName)]] <- map
#sampleList[[paste(map$sampleName)]]
}
map <- lapply(c("trim_SE"), grep, x = reads, value = TRUE)
map
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
column = "SAMPLE_ID"
map$sampleName <-  samples[i,column]
i <- 1
map$sampleName <-  samples[i,column]
#map$SE <- map$SE[i]
map$SE <- samples[i,2]
sampleList[[paste(map$sampleName)]] <- map
sampleList <- list()
sampleList[[paste(map$sampleName)]] <- map
sampleList
samples[i,2]
#map$SE <- map$SE[i]
map$SE <- samples[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList
map$SE <- map$SE[i]
map
map$SE
map <- lapply(c("trim_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
map
#map$SE <- map$SE[i]
map$SE <- samples[i,2]
map
map
map <- lapply(c("trim_SE"), grep, x = reads, value = TRUE)
map
names(map) <- c("SE")
map
map$sampleName <-  samples[i,column]
map
map$SE <- map$SE[i]
map
map$SE <- samples[i,2]
map
createSampleList <- function(samples, reads_folder, column = "SAMPLE_ID", fileType = NULL, libraryType = "pairEnd", samplesFromSTAR = FALSE, step = NULL) {
sampleList <- list()
samples <- as.data.frame(samples)
aceptedFileTypes <- c("fastq.gz", "bam", "sam")
if (!is.null(fileType)) {
if (!fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'fastq', 'bam' or 'sam'"))
}
}
aceptedLibraryType <- c("pairEnd", "singleEnd")
if (!libraryType %in% aceptedLibraryType) {
stop(glue("Library type ({libraryType}) not found, please provide one of 'pairEnd' or 'singleEnd'"))
}
if (!file.exists(reads_folder)) {
stop(glue("reads_folder {reads_folder} does not exist\n"))
}
### column SAMPLE_ID should be the sample name
### rows can be commented out with #
if (libraryType == "pairEnd") {
if (!all(c(column, "Read_1", "Read_2") %in% colnames(samples))) {
stop(glue("Expecting the three columns {column}, Read_1 and Read_2 in samples file (tab-delimited)\n"))
}
}
if (!is.null(fileType)) {
if (fileType == "fastq.gz") {
if (libraryType == "pairEnd") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
if (step == "QualityControl") {
map <- lapply(c("_R1","_R2"), grep, x = reads, value = TRUE)
names(map) <- c("R1","R2")
map$sampleName <-  samples[i,column]
map$R1 <- samples[i,2]
map$R2 <- samples[i,3]
sampleList[[paste(map$sampleName)]] <- map
#sampleList[[paste(map$sampleName)]]
} else if (step == "Mapping") {
map <- lapply(c("_PE1", "_PE2", "_SE1", "_SE2"), grep, x = reads, value = TRUE)
names(map) <- c("PE1", "PE2", "SE1", "SE2")
map$sampleName <-  samples[i,column]
map$PE1 <- map$PE1[i]
map$PE2 <- map$PE2[i]
map$SE1 <- map$SE1[i]
map$SE2 <- map$SE2[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
} else if (libraryType == "singleEnd") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads_folder <- "01-CleanedReads/"
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
if (any(step %in% c("QualityControl", "Mapping"))) {
map <- lapply(c("trim_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
map$SE <- map$SE[i]
#map$SE <- samples[i,2]
sampleList[[paste(map$sampleName)]] <- map
#sampleList[[paste(map$sampleName)]]
}
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
}
} else if (fileType == "bam") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "bam$", full.names = TRUE)
map <- lapply(c("_sam_sorted_pos.bam"), grep, x = reads, value = TRUE)
names(map) <- c("bam_sorted_pos")
map$sampleName <-  samples[i,column]
map$bam_sorted_pos <- map$bam_sorted_pos[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
} else if (fileType == "sam") {
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
names(map) <- c("unsorted_sample")
map$sampleName <-  samples[i,column]
map$unsorted_sample <- map$unsorted_sample[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up",length(sampleList),"jobs"), stdout())
return(sampleList)
}
}
if (is.null(fileType) & samplesFromSTAR == TRUE) {
# if (is.null(starFolder)) {
#   stop(glue("{starFolder} cannot be null, please provide a valid name for the STAR results folder"))
# }
#reads_folder <- starFolder
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = ".bam$", full.names = TRUE)
map <- lapply(c("_Aligned.sortedByCoord.out.bam"), grep, x = reads, value = TRUE)
names(map) <- c("Aligned.sortedByCoord.out")
map$sampleName <-  samples[i,column]
map$Aligned.sortedByCoord.out <- map$Aligned.sortedByCoord.out[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up", length(sampleList), "jobs"),stdout())
return(sampleList)
}
return(sampleList)
}
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz",
libraryType = opt$libraryType,
step = "Mapping"
)
MappingQuery
reads_folder
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
MappingQuery
samples
source("~/OneDrive/posDoc/miRbaqcom/miRbaqcomMapping-Bowtie.R", echo=TRUE)
setwd("~/OneDrive/posDoc/miRbaqcom")
source("~/OneDrive/posDoc/miRbaqcom/miRbaqcomMapping-Bowtie.R", echo=TRUE)
MappingQuery
