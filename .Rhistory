cores <- prepareCore()
library(baqcomPackage)
cores <- prepareCore()
samples <- loadSamplesFile(
file = "../../OneDrive/posDoc/BAQCOM/samples.txt",
reads_folder = "../../OneDrive/posDoc/BAQCOM/00-Fastq/")
samples
samples
sampleList <- createSampleList(samples = samples, reads_folder = "../../OneDrive/posDoc/BAQCOM/00-Fastq/")
sampleList
samples <- loadSamplesFile(
file = "../../OneDrive/posDoc/BAQCOM/samples.txt",
reads_folder = "../../OneDrive/posDoc/BAQCOM/00-Fastq/")
samples
sampleList <- createSampleList(samples = samples, reads_folder = "../../OneDrive/posDoc/BAQCOM/02-MappedReadsSTAR/", libraryType = "bam")
sampleList <- createSampleList(samples = samples, reads_folder = "../../OneDrive/posDoc/BAQCOM/02-MappedReadsSTAR/", fileType = "bam")
sampleList
createSampleList
sampleList
sampleList <- createSampleList(samples = samples, reads_folder = "../../OneDrive/posDoc/BAQCOM/02-MappedReadsSTAR/", fileType = "bam")
sampleList
library(baqcomPackage)
sampleList <- createSampleList(samples = samples, reads_folder = "../../OneDrive/posDoc/BAQCOM/02-MappedReadsSTAR/", fileType = "bam")
sampleList
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/01-CleanedReads/", fileType = "fastq.gz")
sampleList
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "bam")
sampleList
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "sam")
sampleList
library(baqcomPackage)
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "sam")
sampleList
samples
reads_folder
reads_folder = "../BAQCOM/02-MappedReadsHISAT2/"
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
reads
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
map
reads <- dir(path = file.path(reads_folder), pattern = "bam$", full.names = TRUE)
reads
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
map
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.sam$'), full.names = TRUE)
files
count <- lapply(c("_unsorted_sample.sam"), grep, x = files, value = TRUE)
count
names(count) <- c("unsorted_sample")
count$sampleName <-  samples[i,column]
column
column = "SAMPLE_ID"
count$sampleName <-  samples[i,column]
column
i
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.sam$'), full.names = TRUE)
count <- lapply(c("_unsorted_sample.sam"), grep, x = files, value = TRUE)
names(count) <- c("unsorted_sample")
count$sampleName <-  samples[i,column]
count$unsorted_sample <- count$unsorted_sample[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
i
count$sampleName <-  samples[i,column]
samples
column
samples[i,column]
column
samples <- as.data.frame(samples)
count$sampleName <-  samples[i,column]
count$unsorted_sample <- count$unsorted_sample[i]
count
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.sam$'), full.names = TRUE)
count <- lapply(c("_unsorted_sample.sam"), grep, x = files, value = TRUE)
names(count) <- c("unsorted_sample")
count$sampleName <-  samples[i,column]
count$unsorted_sample <- count$unsorted_sample[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
counting_list <- list()
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.sam$'), full.names = TRUE)
count <- lapply(c("_unsorted_sample.sam"), grep, x = files, value = TRUE)
names(count) <- c("unsorted_sample")
count$sampleName <-  samples[i,column]
count$unsorted_sample <- count$unsorted_sample[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
counting_list
sampleList <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
names(map) <- c("unsorted_sample")
map$sampleName <-  samples[i,column]
map$bam_sorted_pos <- map$bam[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
sampleList
samples[i,column]
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
reads
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
map
names(map) <- c("unsorted_sample")
map
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "sam$", full.names = TRUE)
map <- lapply(c("_unsorted_sample.sam"), grep, x = reads, value = TRUE)
names(map) <- c("unsorted_sample")
map$sampleName <-  samples[i,column]
map$unsorted_sample <- map$unsorted_sample[i]
sampleList[[paste(map$sampleName)]] <- map
sampleList[[paste(map$sampleName, sep = "_")]]
}
sampleList
library(baqcomPackage)
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "sam")
sampleList
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "bam")
sampleList
library(baqcomPackage)
Threads = 8
nThreads = 8
write(glue("Using {nThreads} processors"),stdout())
library(glue)
write(glue("Using {nThreads} processors"),stdout())
if (detectCores() < nThreads) {
write(glue("The number of cores specified ({nThreads}) is greater than the number of cores available ({detectCores()})"), stdout())
glue("Using {detectCores()} threads")
nThreads <- detectCores()
}
library(parallel)
if (detectCores() < nThreads) {
write(glue("The number of cores specified ({nThreads}) is greater than the number of cores available ({detectCores()})"), stdout())
glue("Using {detectCores()} threads")
nThreads <- detectCores()
}
library(baqcomPackage)
file
library(baqcomPackage)
samples <- loadSamplesFile(
file = "../../OneDrive/posDoc/BAQCOM/samples.txt",
reads_folder = "../../OneDrive/posDoc/BAQCOM/00-Fastq/")
samples <- loadSamplesFile(
file = "../BAQCOM/samples.txt",
reads_folder = "../BAQCOM/00-Fastq/")
library(baqcomPackage)
procs <- prepareCore(nThreads = opt$procs)
library(baqcomPackage)
samples <- loadSamplesFile(
file = "../BAQCOM/samples.txt",
reads_folder = "../BAQCOM/00-Fastq/")
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "bam")
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
opt$samplesFile
suppressPackageStartupMessages(library("tools"))
suppressPackageStartupMessages(library("parallel"))
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library(baqcomPackage))
option_list <- list(
make_option(c("-f", "--file"), type = "character", default = "samples.txt",
help = "The filename of the sample file [default %default]",
dest = "samplesFile"),
make_option(c("-b", "--format"), type = "character", default = "sam",
help = "type of alignment_file data, either 'sam' or 'bam' [default %default]",
dest = "format"),
make_option(c("-c", "--column"), type = "character", default = "SAMPLE_ID",
help = "Column name from the sample sheet to use as read folder names [default %default]",
dest = "samplesColumn"),
make_option(c("-i", "--inputFolder"), type = "character", default = "02-MappedReadsHISAT2",
help = "Directory where the sequence data is stored [default %default]",
dest = "inputFolder"),
make_option(c('-E', '--countFolder'), type = 'character', default = '04-GeneCountsFeatCounts',
help = 'Folder that the output will be stored [default %default]',
dest = 'countsFolder'),
make_option(c("-a", "--gtfTargets"), type = "character", default = "gtf_targets.gtf",
help = "Path to the gtf file [target gtf] to run mapping against. If would like to run without gtf file, -g option is not required [default %default]",
dest = "gtfTarget"),
make_option(c("-T", "--processors"), type = "integer", default = 8,
help = "Number of processors to use [defaults %default]",
dest = "procs"),
make_option(c("-Q", "--minaqual"), type = "integer", default = 20,
help = "The minimum mapping quality score a read must satisfy in order to be counted. [defaults %default]",
dest = "minaQual"),
make_option(c("-q", "--sampleprocs"), type = "integer", default = 2,
help = "Number of samples to process at time [default %default]",
dest = "mprocs"),
make_option(c('-s', '--stranded'), type = 'character', default = 'no',
help = 'Select the output according to the strandedness of your data. options: no, yes and reverse [default %default]',
dest = 'stranded'),
make_option(c('-r', '--order'), type = 'character', default = 'name',
help = 'Pos or name. Sorting order of alignment_file. Paired-end sequencing data must be sorted either by position or by read name, and the sorting order must be specified. Ignored for single-end data. [default %default]',
dest = 'order'),
make_option(c("-m", "--multiqc"), action = "store_true", default = FALSE,
help  =  "Use this option if you want to run multiqc software. [default %default]",
dest  =  "multiqc"),
make_option(c("-p", "--consensus"), action = 'store_true', type = "character", default = FALSE,
help = "Specify the minimum number of consensus subreads both
reads from the same pair must have. This argument is only applicable for paired-end read data. [default %default]",
dest = "consensus"),
make_option(c("-B", "--indexSplit"), action = 'store_true', type = "character", default = FALSE,
help  =  "Create one block of index. The built index will not be split into multiple pieces. The more blocks an index has, the slower the mapping speed. [default %default]",
dest  =  "indexSplit"),
make_option(c("-C", "--countChimericFragments"), action = 'store_true', type = "character", default = FALSE,
help  =  "If specified, the chimeric fragments (those fragments that have their two ends aligned to different chromosomes) will NOT be counted. [default %default]",
dest  =  "countChimericFragments"),
make_option(c("-z", "--libraryType"),
type  = 'character', default = "pairEnd",
help = "The library type to use. Available: 'pairEnd' or 'singleEnd'. [ default %default]",
dest = "libraryType"),
make_option(c("-x", "--external"), action  =  'store', type  =  "character", default = 'FALSE',
help = "A space delimeted file with a single line contain several external parameters from HISAT2 [default %default]",
dest = "externalParameters"),
make_option(c("-S", "--fromSTAR"), action = "store_true", default = FALSE,
help = "This option will performes counting from STAR mapped files. Specify the Folder that contains BAM files from STAR [%default]",
dest = "samplesFromSTAR")
)
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
opt <- parse_args(OptionParser(option_list = option_list, description =  paste('Authors: OLIVEIRA, H.C. & CANTAO, M.E.', 'Version: 0.3.3', 'E-mail: hanielcedraz@gmail.com', sep = "\n", collapse = '\n')))
samples <- loadSamplesFile(file = opt$samplesFile, reads_folder = opt$Raw_Folder, column = opt$samplesColumn, opt$libraryType)
opt$samplesFile
setwd("/Users/haniel/Documents/BAQCOM/")
samples <- loadSamplesFile(file = opt$samplesFile, reads_folder = opt$Raw_Folder, column = opt$samplesColumn, opt$libraryType)
procs <- prepareCore(nThreads = opt$procs)
opt$samplesFromSTAR
couting <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, fileType = NULL, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
couting <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, fileType = opt$format, libraryType = opt$libraryType)
couting
opt$libraryType
couting <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
couting <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
opt$inputFolder
couting <- createSampleList(samples = samples, reads_folder = "02-MappedReadsSTAR/", column = opt$samplesColumn, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
library(baqcomPackage)
couting <- createSampleList(samples = samples, reads_folder = "02-MappedReadsSTAR/", column = opt$samplesColumn, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
couting
couting <- createSampleList(samples = samples, reads_folder = "02-MappedReadsSTAR/", column = opt$samplesColumn, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
library(baqcomPackage)
couting <- createSampleList(samples = samples, reads_folder = "02-MappedReadsSTAR/", column = opt$samplesColumn, libraryType = opt$libraryType, samplesFromSTAR = TRUE)
couting
opt$samplesFromSTAR
opt$opt$inputFolder
opt$inputFolder
library(baqcomPackage)
library(baqcomPackage)
library(baqcomPackage)
suppressPackageStartupMessages(library("tools"))
suppressPackageStartupMessages(library("parallel"))
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library(baqcomPackage))
option_list <- list(
make_option(c("-f", "--file"), type = "character", default = "samples.txt",
help = "The filename of the sample file [default %default]",
dest = "samplesFile"),
make_option(c("-c", "--column"), type = "character", default = "SAMPLE_ID",
help = "Column name from the sample sheet to use as read folder names [default %default]",
dest = "samplesColumn"),
make_option(c("-r", "--inputFolder"), type = "character", default = "01-CleanedReads",
help = "Directory where the sequence data is stored [default %default]",
dest = "inputFolder"),
make_option(c("-b", "--mappingFolder"), type = "character", default = '02-MappedReadsHISAT2',
help = "Directory to store the mapped reads [default %default]",
dest = "mappingFolder"),
make_option(c("-e", "--extractFolder"), type = "character", default = "03-UnmappedReadsHISAT2",
help = "Directory to store the ummapped reads [default %default]",
dest = "extractedFolder"),
make_option(c("-u", "--unmapped"), action = "store_true", default = FALSE,
help = "Run samtools to extract unmapped reads from bam or sam files. [%default]",
dest = "unmapped"),
make_option(c("-t", "--mappingTargets"), type = "character", default = "mapping_targets.fa",
help = "Path to the fasta file [target fasta] to run mapping against (default %default); or path to the directory where the genome indices are stored (path/to/the/genoma_file/index_HISAT2.)",
dest = "mappingTarget"),
make_option(c("-g", "--gtfTargets"), type = "character", default = "gtf_targets.gtf",
help = "Path to the gtf file [target gtf] to run mapping against. If would like to run without gtf file, -g option is not required [default %default]",
dest = "gtfTarget"),
make_option(c("-p", "--processors"), type = "integer", default = 8,
help = "Number of processors to use [defaults %default]",
dest = "procs"),
make_option(c("-q", "--sampleprocs"), type = "integer", default = 2,
help = "Number of samples to process at time [default %default]",
dest = "mprocs"),
make_option(c("-m", "--multiqc"), action = "store_true", default = FALSE,
help  =  "Use this option if you want to run multiqc analysis. [default %default]",
dest  =  "multiqc"),
make_option(c("-x", "--external"), action  =  'store', type  =  "character", default = FALSE,
help = "A space delimeted file with a single line containing external parameters from HISAT2 [default %default]",
dest = "externalParameters"),
make_option(c("-i", "--index"), action = "store_true", default = FALSE,
help = "This option directs HISAT2 to run genome indices generation. [%default]",
dest = "indexBuild"),
make_option(c("-o", "--indexFiles"), type  =  'character', default = 'ht2_base',
help = "The basename of the index files to write. [%default]",
dest = "indexFiles"),
make_option(c("-w", "--pmode"), action = "store_true", default = FALSE,
help  =  "Use this option if you want to run two pass mode mapping. [default %default]",
dest  =  "PassMode"),
make_option(c("-s", "--samtools"), action = "store_true", default = FALSE,
help = "Use this option if you want to convert the SAM files to sorted BAM. samtools is required [%default]",
dest = "samtools"),
make_option(c("-z", "--libraryType"),
type  = 'character', default = "pairEnd",
help = "The library type to use. Available: 'pairEnd' or 'singleEnd'. [ default %default]",
dest = "libraryType"),
make_option(c("-d", "--delete"), action = "store_true", default = FALSE,
help = "Use this option if you want to delete the SAM files after convert to sorted BAM. [%default]",
dest = "deleteSAMfiles")
)
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
opt <- parse_args(OptionParser(option_list = option_list, description =  paste('Authors: OLIVEIRA, H.C. & CANTAO, M.E.', 'Version: 0.3.5', 'E-mail: hanielcedraz@gmail.com', sep = "\n", collapse = '\n')))
#santools.map <- samtoolsList(samples, opt$inputFolder, opt$samplesColumn)
santools.map <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, fileType = "sam", libraryType = opt$libraryType)
santools.map
opt$inputFolder
mapping_Folder
## create output folder
mapping_Folder <- opt$mappingFolder
mapping_Folder
#santools.map <- samtoolsList(samples, opt$inputFolder, opt$samplesColumn)
santools.map <- createSampleList(samples = samples, reads_folder = mapping_Folder, column = opt$samplesColumn, fileType = "sam", libraryType = opt$libraryType)
santools.map
suppressPackageStartupMessages(library("tools"))
suppressPackageStartupMessages(library("parallel"))
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library(baqcomPackage))
option_list <- list(
make_option(c("-f", "--file"), type = "character", default = "samples.txt",
help = "The filename of the sample file [default %default]",
dest = "samplesFile"),
make_option(c("-b", "--format"), type = "character", default = "sam",
help = "type of alignment_file data, either 'sam' or 'bam' [default %default]",
dest = "format"),
make_option(c("-c", "--column"), type = "character", default = "SAMPLE_ID",
help = "Column name from the sample sheet to use as read folder names [default %default]",
dest = "samplesColumn"),
make_option(c("-i", "--inputFolder"), type = "character", default = "02-MappedReadsHISAT2",
help = "Directory where the sequence data is stored [default %default]",
dest = "inputFolder"),
make_option(c('-E', '--countFolder'), type = 'character', default = '04-GeneCountsHTSeq',
help = 'Directory where the output is stored [default %default]',
dest = 'countsFolder'),
make_option(c("-g", "--gtfTargets"), type = "character", default = "gtf_targets.gtf",
help = "Path to the gtf file [target gtf] to run mapping against. If would like to run without gtf file, -g option is not required [default %default]",
dest = "gtfTarget"),
make_option(c("-p", "--processors"), type = "integer", default = 8,
help = "Number of processors to use [defaults %default]",
dest = "procs"),
make_option(c("-a", "--minaqual"), type = "integer", default = 20,
help = "Skip all reads with alignment quality lower than the given minimum value [defaults %default]",
dest = "minaQual"),
make_option(c("-q", "--sampleprocs"), type = "integer", default = 2,
help = "Number of samples to process at time [default %default]",
dest = "mprocs"),
make_option(c('-s', '--stranded'), type = 'character', default = 'no',
help = 'Select the output according to the strandedness of your data. options: no, yes and reverse [default %default]',
dest = 'stranded'),
make_option(c('-r', '--order'), type = 'character', default = 'name',
help = 'Pos or name. Sorting order of alignment_file. Paired-end sequencing data must be sorted either by position or by read name, and the sorting order must be specified. Ignored for single-end data. [default %default]',
dest = 'order'),
make_option(c("-m", "--multiqc"), action = "store_true", default = FALSE,
help  =  "Use this option if you want to run multiqc analysis. [default %default]",
dest  =  "multiqc"),
make_option(c("-z", "--libraryType"),
type  = 'character', default = "pairEnd",
help = "The library type to use. Available: 'pairEnd' or 'singleEnd'. [ default %default]",
dest = "libraryType"),
make_option(c("-x", "--external"), action  =  'store', type  =  "character", default = 'FALSE',
help = "A space delimeted file with a single line containing external parameters from HISAT2 [default %default]",
dest = "externalParameters")
)
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
opt <- parse_args(OptionParser(option_list = option_list, description =  paste('Authors: OLIVEIRA, H.C. & CANTAO, M.E.', 'Version: 0.3.5', 'E-mail: hanielcedraz@gmail.com', sep = "\n", collapse = '\n')))
samples <- loadSamplesFile(file = opt$samplesFile, reads_folder = opt$inputFolder, column = opt$samplesColumn, libraryType = opt$libraryType)
samples
procs <- prepareCore(nThreads = opt$procs)
couting <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, fileType = opt$format, libraryType = opt$libraryType)
couting
suppressPackageStartupMessages(library("tools"))
suppressPackageStartupMessages(library("parallel"))
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("data.table"))
suppressPackageStartupMessages(library(baqcomPackage))
option_list <- list(
make_option(c("-f", "--file"), type = "character", default = "samples.txt",
help = "The filename of the sample file [default %default]",
dest = "samplesFile"),
make_option(c("-c", "--column"), type = "character", default = "SAMPLE_ID",
help = "Column name from the sample sheet to use as read folder names [default %default]",
dest = "samplesColumn"),
make_option(c("-r", "--inputFolder"), type = "character", default = "01-CleanedReads",
help = "Directory where the sequence data is stored [default %default]",
dest = "inputFolder"),
make_option(c("-b", "--mappingFolder"), type = "character", default = '02-MappedReadsSTAR',
help = "Directory to store the mapped results [default %default]",
dest = "mappingFolder"),
make_option(c("-e", "--extractFolder"), type = "character", default = "03-UnmappedReadsSTAR",
help = "Save Unmapped reads to this folder [default %default]",
dest = "extractedFolder"),
make_option(c('-E', '--countFolder'), type  =  'character', default  =  '04-GeneCountsSTAR',
help = 'Directory to store the count reads results [default %default]',
dest = 'countsFolder'),
make_option(c("-m", "--multiqc"), action = 'store_true', type = "logical", default = FALSE,
help = "Use this option if you want to run multiqc analysis. [default %default]",
dest = "multiqc"),
make_option(c("-t", "--mappingTargets"), type = "character", default = "mapping_targets.fa",
help = "Path to the fasta file [target fasta] to run mapping against (default %default); or path to the directory where the genome indices are stored (path/to/the/genoma_file/index_STAR.",
dest = "mappingTarget"),
make_option(c("-g", "--gtfTargets"), type = "character", default = "gtf_targets.gtf",
help = "Path to the gtf file [target gtf] to run mapping against. If would like to run without gtf file, -g option is not required [default %default]",
dest = "gtfTarget"),
make_option(c("-p", "--processors"), type = "integer", default = 8,
help = "number of processors to use [defaults %default]",
dest = "procs"),
make_option(c("-q", "--sampleprocs"), type = "integer", default = 2,
help = "number of samples to process at time [default %default]",
dest = "mprocs"),
make_option(c("-a", "--sjdboverhang"), type = "integer", default = 100,
help = "Specify the length of the genomic sequence around the annotated junction to be used in constructing the splice junctions database [default %default]",
dest = "annoJunction"),
make_option(c('-s', '--stranded'), type  =  'character', default  =  'no',
help = 'Select the output according to the strandedness of your data. options: no, yes and reverse [default %default]',
dest = 'stranded'),
make_option(c("-x", "--external"), action  =  'store', type  =  "character", default = 'FALSE',
help = "A space delimeted file with a single line contain several external parameters from STAR [default %default]",
dest = "externalParameters"),
make_option(c("-i", "--index"), action = "store_true", default = FALSE,
help = "This option directs STAR to re-run genome indices generation. [%default]",
dest = "indexBuild"),
make_option(c("-z", "--libraryType"),
type  = 'character', default = "pairEnd",
help = "The library type to use. Available: 'pairEnd' or 'singleEnd'. [ default %default]",
dest = "libraryType"),
make_option(c("-o", "--outSAMtype"), type = "character", default = "SortedByCoordinate",
help = "Output sorted by coordinate Aligned.sortedByCoord.out.bam file (default: %default); Output unsorted Aligned.out.bam file (Unsorted); Output both unsorted and sorted files (UnsortedSortedByCoordinate).",
dest = "outSAMtype"),
make_option(c("-u", "--quantMode"), type = "character", default = "GeneCounts",
help = "Types of quantifcation requested: Output SAM/BAM alignments to transcriptome into a separate file (TranscriptomeSAM); Count reads per gene (default: %default); Output both transcriptome and reads per gene files (TranscriptomeSAMGeneCounts).",
dest = "quantMode")
# make_option(c("-z", "--readfilesCommand"), type = "character", default = "gunzip",
#             help = "UncompressionCommandoption, whereUncompressionCommandis theun-compression command that takes the file name as input parameter, and sends the uncom-pressed output to stdout.",
#             dest = "Uncompress"),
)
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
opt <- parse_args(OptionParser(option_list = option_list, description =  paste('Authors: OLIVEIRA, H.C. & CANTAO, M.E.', 'Version: 0.3.5', 'E-mail: hanielcedraz@gmail.com', sep = "\n", collapse = '\n'), usage = paste('baqcomSTARmapping.R', '-t', 'reference genome', '[options]')))
samples <- loadSamplesFile(file = opt$samplesFile, reads_folder = opt$inputFolder, column = opt$samplesColumn, libraryType = opt$libraryType)
samples
procs <- prepareCore(nThreads = opt$procs)
procs
couting <- createSampleList(samples = samples, reads_folder = opt$inputFolder, column = opt$samplesColumn, fileType = "fastq.gz", libraryType = opt$libraryType, step = "Mapping")
couting
library(baqcomPackage)
devtools::install_github()
library(baqcomPackage)
library(baqcomPackage)
cores <- prepareCore()
cores
samples <- loadSamplesFile(
file = "../BAQCOM/samples.txt",
reads_folder = "../BAQCOM/00-Fastq/")
samples <- loadSamplesFile()
sampleList <- createSampleList(samples = samples, reads_folder = "../BAQCOM/02-MappedReadsHISAT2/", fileType = "bam")
