#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq",
libraryType = "singleEnd",
program = opt$mappingProgram
)
aceptedFileTypes <- c("bam", "sam", "fastq.gz$", "fastq$")
if (!is.null(fileType)){
if (!fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'bam', 'sam', 'fastq$' or 'fastq.gz$' "))
}
}
samples <- baqcomPackage::loadSamplesFile(
file = opt$samplesFile,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, libraryType = opt$libraryType
)
# samples <- baqcomPackage::loadSamplesFile(
#     file = "samplesPair.txt",
#     reads_folder = "01-CleanedReadsPair/",
#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq",
libraryType = "singleEnd",
program = opt$mappingProgram
)
library(baqcomPackage)
samples
samples <- baqcomPackage::loadSamplesFile(
file = "samplesSingle.txt",
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, libraryType = "singleEnd"
)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq",
libraryType = "singleEnd",
program = opt$mappingProgram
)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq$",
libraryType = "singleEnd",
program = opt$mappingProgram
)
fileType <- "fastq.gz$"
reads <- dir(path = file.path(reads_folder), pattern = fileType, full.names = TRUE)
reads
reads_folder
library(baqcomPackage)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd",
program = opt$mappingProgram
)
opt$mappingProgram
library(baqcomPackage)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd",
program = opt$mappingProgram
)
paste(
"unpigz", opt$cleanedFolder,
paste("-p", procs)
)
procs
paste(
"unpigz", opt$cleanedFolder,
paste("-p", "procs")
)
system(
paste("unpigz", paste0(opt$cleanedFolder, "/"),
paste("-p", "procs")
)
)
paste("unpigz", paste0(opt$cleanedFolder, "/"),
paste("-p", "procs")
)
system(
paste("unpigz", paste0(opt$cleanedFolder, "/*"),
paste("-p", procs)
)
)
if (!require(baqcomPackage)) {
devtools::install_github(repo = "git@github.com:hanielcedraz/baqcomPackage.git", upgrade = "never", quiet = TRUE, force = TRUE)
}
## loadSampleFile
loadSamplesFile <- function(file, reads_folder, column = "SAMPLE_ID", libraryType = "pairEnd"){
## debug
#file = opt$samplesFile; reads_folder = opt$Raw_Folder; column = opt$samplesColumn
##
aceptedLibraryType <- c("pairEnd", "singleEnd")
if (!libraryType %in% aceptedLibraryType) {
stop(glue("Library type ({libraryType}) not found, please provide one of 'pairEnd' or 'singleEnd'"))
}
if (!file.exists(file)) {
stop(glue("Sample file {file} does not exist"))
}
### column SAMPLE_ID should be the sample name
### rows can be commented out with #
targets <- read.table(file, header = TRUE) %>%
mutate(column = as.character(column))
if (libraryType == "pairEnd") {
if (!all(c(column, "Read_1", "Read_2") %in% colnames(targets))) {
stop(glue("Expecting the three columns SAMPLE_ID, Read_1 and Read_2 in samples file (tab-delimited)"))
stop()
}
}
for (i in seq.int(nrow(targets$column))) {
if (targets[i, column]) {
ext <- unique(file_ext(dir(file.path(reads_folder, targets[i,column]), pattern = "gz")))
if (length(ext) == 0) {
write(paste("Cannot locate fastq or sff file in folder",targets[i,column],"\n"), stderr())
stop()
}
# targets$type[i] <- paste(ext,sep="/")
}
else {
ext <- file_ext(grep("gz", dir(file.path(reads_folder, targets[i, column])), value = TRUE))
if (length(ext) == 0) {
write(paste(targets[i,column],"is not a gz file\n"), stderr())
stop()
}
}
}
write(glue("{file} contains {nrow(targets)} samples to process"), stdout())
return(targets)
}
samplesFile <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/samplesReal.txt"
cleanedFolder <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/01-CleanedReadsReal/"
samplesColumn <- "SAMPLE_ID"
slibraryType <- "singleEnd"
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
library(dplyr)
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
library(tools)
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
library(glue)
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
samples
## loadSampleFile
loadSamplesFile <- function(file, reads_folder, column = "SAMPLE_ID", libraryType = "pairEnd"){
## debug
#file = opt$samplesFile; reads_folder = opt$Raw_Folder; column = opt$samplesColumn
##
aceptedLibraryType <- c("pairEnd", "singleEnd")
if (!libraryType %in% aceptedLibraryType) {
stop(glue("Library type ({libraryType}) not found, please provide one of 'pairEnd' or 'singleEnd'"))
}
if (!file.exists(file)) {
stop(glue("Sample file {file} does not exist"))
}
### column SAMPLE_ID should be the sample name
### rows can be commented out with #
targets <- fread(file, header = TRUE) %>%
mutate(column = as.character(column))
if (libraryType == "pairEnd") {
if (!all(c(column, "Read_1", "Read_2") %in% colnames(targets))) {
stop(glue("Expecting the three columns SAMPLE_ID, Read_1 and Read_2 in samples file (tab-delimited)"))
stop()
}
}
for (i in seq.int(nrow(targets$column))) {
if (targets[i, column]) {
ext <- unique(file_ext(dir(file.path(reads_folder, targets[i,column]), pattern = "gz")))
if (length(ext) == 0) {
write(paste("Cannot locate fastq or sff file in folder",targets[i,column],"\n"), stderr())
stop()
}
# targets$type[i] <- paste(ext,sep="/")
}
else {
ext <- file_ext(grep("gz", dir(file.path(reads_folder, targets[i, column])), value = TRUE))
if (length(ext) == 0) {
write(paste(targets[i,column],"is not a gz file\n"), stderr())
stop()
}
}
}
write(glue("{file} contains {nrow(targets)} samples to process"), stdout())
return(targets)
}
library(data.table)
loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
file <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/samplesReal.txt"
fread(file, header = TRUE)
fread(file, header = TRUE) %>%
mutate(column = as.character(column))
column = "SAMPLE_ID"
fread(file, header = TRUE) %>%
mutate(column = as.character(column))
readr::read_table(file, header = TRUE)
readr::read_table(file)
readr::read_table(file) %>%
mutate(column = as.character(column))
readr::read_table(file, progress = TRUE)
install.packages("tidyr")
library(tidyr)
library(purrr)
readr::read_table(file) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
readr::read_table(file, col_names = c(columnm, "Read_1"), col_types = c("character", "character"))
readr::read_table(file, col_types = c("character", "character"))
readr::read_table(file, col_types = c("character", "character"))
targets <- readr::read_table(file, col_types = c("character", "character"))
targets <- readr::read_table(file, col_types = c("c", "c"))
targets
readr::read_table(file, col_names = c(`column`, "Read_1"), col_types = c("c", "c"))
readr::read_table(file, col_names = c(`column`, "Read_1"), col_types = c("c", "c", "c"))
readr::read_table(file, col_names = c(`column`, "Read_1"), col_types = c("c"))
targets <- readr::read_table(file, col_names = c(`column`, "Read_1"), col_types = c("c")) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
targets <- readr::read_file(file, col_names = c(`column`, "Read_1"), col_types = c("c")) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
readr::read_file(file)
targets <- readr::read_file(file) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
targets
readr::read_table2(file, col_names = c(`column`, "Read_1"), col_types = c("c"))
readr::read_table(file, col_names = c(`column`, "Read_1"), col_types = c('c', 'c'))
readr::read_table(file, col_names = c("SAMPLE_ID", "Read_1"), col_types = c('c', 'c'))
readr::read_table(file)
readr::read_table(file, col_names = c("SAMPLE_ID", "Read_1"), col_types = c('c', 'c'), show_col_types = TRUE)
readr::read_table(file, col_names = TRUE, col_types = c('c', 'c'))
readr::read_table(file, col_names = TRUE, col_types = c('c', 'c'), progress = show_progress())
readr::read_table(file, col_names = FALSE, col_types = list('c', 'c'))
readr::read_table(file, col_names = FALSE, col_types = list('c'))
targets <- readr::read_table(file, col_names = FALSE, col_types = list('c', 'c')) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
targets
readr::read_table(file, col_types = list('c', 'c')) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
readr::read_table(file, col_types = list("c", "c")) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
reads_folder
reads_folder <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/01-CleanedReadsReal/"
targets
column
i
i <- 1
file_ext(grep("gz", dir(file.path(reads_folder, targets[i, column])), value = TRUE))
library(tools)
file_ext(grep("gz", dir(file.path(reads_folder, targets[i, column])), value = TRUE))
targets
targets <- readr::read_table(file, col_types = list("c", "c")) %>%
purrr::modify_if(~is.double(.), ~as.character(.))
targets
file_ext(grep("gz", dir(file.path(reads_folder, targets[i, column])), value = TRUE))
file.path(reads_folder, targets[i, column])), value = TRUE)
dir(file.path(reads_folder, targets[i, column]))
reads_folder
targets[i, column])
targets[i, column]
targets[i, 2]
file_ext(grep("gz", dir(file.path(reads_folder, targets[i, 2])), value = TRUE))
dir(file.path(reads_folder, targets[i, 2]))
file_ext(grep("gz", dir(file.path(reads_folder)), value = TRUE))
file_ext(grep("gz", dir(file.path(reads_folder, targets[i, 2])), value = TRUE))
file_ext(grep("gz", dir(reads_folder, targets[i, 2]), value = TRUE))
dir(reads_folder, targets[i, 2])
dir(reads_folder, targets[i, column])
dir(reads_folder, `targets[i, column]`)
file_ext(grep("gz", dir(file.path(reads_folder)), value = TRUE))
ext <- file_ext(grep("gz", dir(file.path(reads_folder)), value = TRUE))
length(ext)
targets[i, column]
targets[i,column]
unique(file_ext(dir(file.path(reads_folder, i), pattern = "gz")))
unique(file_ext(dir(file.path(reads_folder, i), pattern = "gz")))
unique(file_ext(dir(file.path(reads_folder), pattern = "gz")))
write(paste("Cannot locate fastq or sff file in folder", targets[i,column], "\n"), stderr())
targets[i, column]
#for (i in seq.int(nrow(targets$column))) {
#if (targets[i, column]) {
ext <- unique(file_ext(dir(file.path(reads_folder), pattern = "gz")))
ext
if (length(ext) == 0) {
write(paste("Cannot locate fastq or sff file in folder", reads_folder, "\n"), stderr())
stop()
}
library(baqcomPackage)
reads_folder
#opt$samplesFile <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/samplesReal.txt"
reads_folder <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/01-CleanedReadsReal/"
## loadSampleFile
loadSamplesFile <- function(file, reads_folder, column = "SAMPLE_ID", libraryType = "pairEnd"){
## debug
#file = opt$samplesFile; reads_folder = opt$Raw_Folder; column = opt$samplesColumn
##
aceptedLibraryType <- c("pairEnd", "singleEnd")
if (!libraryType %in% aceptedLibraryType) {
stop(glue("Library type ({libraryType}) not found, please provide one of 'pairEnd' or 'singleEnd'"))
}
if (!file.exists(file)) {
stop(glue("Sample file {file} does not exist"))
}
### column SAMPLE_ID should be the sample name
### rows can be commented out with #
if (libraryType == "singleEnd") {
targets <- read_table(file, col_types = list("c", "c")) %>%
modify_if(~is.double(.), ~as.character(.))
} else if (libraryType == "pairEnd") {
targets <- read_table(file, col_types = list("c", "c", "c")) %>%
modify_if(~is.double(.), ~as.character(.))
}
if (libraryType == "pairEnd") {
if (!all(c(column, "Read_1", "Read_2") %in% colnames(targets))) {
stop(glue("Expecting the three columns SAMPLE_ID, Read_1 and Read_2 in samples file (tab-delimited)"))
stop()
}
}
#for (i in seq.int(nrow(targets$column))) {
#if (targets[i, column]) {
ext <- unique(file_ext(dir(file.path(reads_folder), pattern = "gz")))
if (length(ext) == 0) {
write(paste("Cannot locate fastq or sff file in folder", reads_folder, "\n"), stderr())
stop()
}
# targets$type[i] <- paste(ext,sep="/")
#}
# else {
#   ext <- file_ext(grep("gz", dir(file.path(reads_folder)), value = TRUE))
#   if (length(ext) == 0) {
#     write(paste(targets[i,column],"is not a gz file\n"), stderr())
#     stop()
#   }
#
# }
#}
write(glue("{file} contains {nrow(targets)} samples to process"), stdout())
return(targets)
}
library(dplyr)
library(glue)
library(tools)
library(data.table)
library(dplyr)
library(glue)
library(tools)
library(purrr)
library(readr)
file <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/samplesReal.txt"
reads_folder <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/01-CleanedReadsReal/"
samplesColumn <- "SAMPLE_ID"
slibraryType <- "singleEnd"
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
=  <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/samplesReal.txt"
samplesFile <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/samplesReal.txt"
reads_folder <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/01-CleanedReadsReal/"
samplesColumn <- "SAMPLE_ID"
slibraryType <- "singleEnd"
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
cleanedFolder <- "/Users/haniel/OneDrive/posDoc/miRbaqcom/01-CleanedReadsReal/"
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
samples
i <- 1
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
reads
# for (i in seq.int(to=nrow(samples))){
#     reads <- dir(path=file.path(reads_folder,samples[i,column]),pattern="gz$",full.names=TRUE)
map <- lapply(c("_PE1", "_PE2", "_SE1", "_SE2"), grep, x = reads, value = TRUE)
#mappingList <- function(samples, reads_folder, column){
mapping_list <- list()
reads_folder
#reads_folder <- "01-CleanedReadsSingle/"
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
column <- "SAMPLE_ID"
map$sampleName <-  samples[i,column]
map$SE <- map$SE[i]
#map$R2 <- samples[i,3]
mapping_list[[paste(map$sampleName)]] <- map
mapping_list
samples
mapping_list
samples[i,column]
samples
i
read_table(file, col_types = list("c", "c")) %>%
modify_if(~is.double(.), ~as.character(.)) %>%
as.data.frame()
## loadSampleFile
loadSamplesFile <- function(file, reads_folder, column = "SAMPLE_ID", libraryType = "pairEnd"){
## debug
#file = opt$samplesFile; reads_folder = opt$Raw_Folder; column = opt$samplesColumn
##
aceptedLibraryType <- c("pairEnd", "singleEnd")
if (!libraryType %in% aceptedLibraryType) {
stop(glue("Library type ({libraryType}) not found, please provide one of 'pairEnd' or 'singleEnd'"))
}
if (!file.exists(file)) {
stop(glue("Sample file {file} does not exist"))
}
### column SAMPLE_ID should be the sample name
### rows can be commented out with #
if (libraryType == "singleEnd") {
targets <- read_table(file, col_types = list("c", "c")) %>%
modify_if(~is.double(.), ~as.character(.)) %>%
as.data.frame()
} else if (libraryType == "pairEnd") {
targets <- read_table(file, col_types = list("c", "c", "c")) %>%
modify_if(~is.double(.), ~as.character(.))
}
if (libraryType == "pairEnd") {
if (!all(c(column, "Read_1", "Read_2") %in% colnames(targets))) {
stop(glue("Expecting the three columns SAMPLE_ID, Read_1 and Read_2 in samples file (tab-delimited)"))
stop()
}
}
#for (i in seq.int(nrow(targets$column))) {
#if (targets[i, column]) {
ext <- unique(file_ext(dir(file.path(reads_folder), pattern = "gz")))
if (length(ext) == 0) {
write(paste("Cannot locate fastq or sff file in folder", reads_folder, "\n"), stderr())
stop()
}
# targets$type[i] <- paste(ext,sep="/")
#}
# else {
#   ext <- file_ext(grep("gz", dir(file.path(reads_folder)), value = TRUE))
#   if (length(ext) == 0) {
#     write(paste(targets[i,column],"is not a gz file\n"), stderr())
#     stop()
#   }
#
# }
#}
write(glue("{file} contains {nrow(targets)} samples to process"), stdout())
return(targets)
}
samples <- loadSamplesFile(
file = samplesFile,
reads_folder = cleanedFolder,
column = samplesColumn,
libraryType = slibraryType
)
samples
#mappingList <- function(samples, reads_folder, column){
mapping_list <- list()
#reads_folder <- "01-CleanedReadsSingle/"
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
map$SE <- map$SE[i]
#map$R2 <- samples[i,3]
mapping_list[[paste(map$sampleName)]] <- map
mapping_list
library(baqcomPackage)
