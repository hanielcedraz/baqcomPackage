mapping_list <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
#map$SE <- map$SE[i]
map$SE <- samples[i,2]
mapping_list[[paste(map$sampleName)]] <- map
#mapping_list[[paste(map$sampleName)]]
}
write(paste("Setting up",length(mapping_list),"jobs"), stdout())
return(mapping_list)
#}
}
} else if (program == "star" | program == "Hisat2" | program == "bowtie" | program == "bwa") {
if (libraryType == "pairEnd") {
#mappingList <- function(samples, reads_folder, column){
mapping_list <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
# for (i in seq.int(to=nrow(samples))){
#     reads <- dir(path=file.path(reads_folder,samples[i,column]),pattern="gz$",full.names=TRUE)
map <- lapply(c("_PE1", "_PE2", "_SE1", "_SE2"), grep, x = reads, value = TRUE)
names(map) <- c("PE1", "PE2", "SE1", "SE2")
map$sampleName <-  samples[i,column]
map$PE1 <- map$PE1[i]
map$PE2 <- map$PE2[i]
map$SE1 <- map$SE1[i]
map$SE2 <- map$SE2[i]
mapping_list[[paste(map$sampleName)]] <- map
mapping_list[[paste(map$sampleName, sep = "_")]]
}
write(paste("Setting up", length(mapping_list), "jobs"),stdout())
return(mapping_list)
#}
} else if (libraryType == "singleEnd") {
#mappingList <- function(samples, reads_folder, column){
mapping_list <- list()
for (i in 1:nrow(samples)) {
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
map$SE <- map$SE[i]
#map$R2 <- samples[i,3]
mapping_list[[paste(map$sampleName)]] <- map
#mapping_list[[paste(map$sampleName)]]
}
write(paste("Setting up",length(mapping_list),"jobs"), stdout())
return(mapping_list)
#}
}
} else if (program == "htseq") {
counting_list <- list()
if (casefold(fileType, upper = FALSE) == 'bam') {
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.bam$'), full.names = TRUE)
count <- lapply(c("_sam_sorted_pos.bam"), grep, x = files, value = TRUE)
names(count) <- c("bam_sorted_pos")
count$sampleName <-  samples[i,column]
count$bam_sorted_pos <- count$bam_sorted_pos[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
} else if (casefold(fileType, upper = FALSE) == 'sam') {
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.sam$'), full.names = TRUE)
count <- lapply(c("_unsorted_sample.sam"), grep, x = files, value = TRUE)
names(count) <- c("unsorted_sample")
count$sampleName <-  samples[i,column]
count$unsorted_sample <- count$unsorted_sample[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
}
write(paste("Setting up", length(counting_list), "jobs"),stdout())
return(counting_list)
} else if (program == "featurecount") {
if (fromSTAR) {
#reads_folder <- opt$inputFolder
#countingList <- function(samples, reads_folder, column) {
counting_list <- list()
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.bam$'), full.names = TRUE)
count <- lapply(c("_Aligned.sortedByCoord.out.bam"), grep, x = files, value = TRUE)
names(count) <- c("Aligned.sortedByCoord.out")
count$sampleName <-  samples[i,column]
count$Aligned.sortedByCoord.out <- count$Aligned.sortedByCoord.out[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
write(paste("Setting up", length(counting_list), "jobs"),stdout())
return(counting_list)
#}
} else {
#countingList <- function(samples, reads_folder, column) {
counting_list <- list()
if (casefold(fileType, upper = FALSE) == 'bam') {
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.bam$'), full.names = TRUE)
count <- lapply(c("_sam_sorted_pos.bam"), grep, x = files, value = TRUE)
names(count) <- c("bam_sorted_pos")
count$sampleName <-  samples[i,column]
count$bam_sorted_pos <- count$bam_sorted_pos[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
} else if (casefold(fileType, upper = FALSE) == 'sam') {
for (i in 1:nrow(samples)) {
files <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = paste0('.sam$'), full.names = TRUE)
count <- lapply(c("_unsorted_sample.sam"), grep, x = files, value = TRUE)
names(count) <- c("unsorted_sample")
count$sampleName <-  samples[i,column]
count$unsorted_sample <- count$unsorted_sample[i]
counting_list[[paste(count$sampleName)]] <- count
counting_list[[paste(count$sampleName, sep = "_")]]
}
}
write(paste("Setting up", length(counting_list), "jobs"),stdout())
return(counting_list)
#}
}
} else if (program == "samtools") {
#samtoolsList <- function(samples, reads_folder, column){
samtoolsfiles <- list()
for (i in 1:nrow(samples)) {
samfiles <- dir(path = file.path(reads_folder), recursive = TRUE, pattern = ".sam$", full.names = TRUE)
maps <- lapply(c("_unsorted_sample"), grep, x = samfiles, value = TRUE)
names(maps) <- c("unsorted_sample")
maps$sampleName <-  samples[i,column]
maps$unsorted_sample <- maps$unsorted_sample[i]
samtoolsfiles[[paste(maps$sampleName)]] <- maps
samtoolsfiles[[paste(maps$sampleName, sep = "_")]]
}
write(paste("Setting up", length(samtoolsfiles), "jobs"),stdout())
return(samtoolsfiles)
#}
}
}
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd", fileType = NA,
program = opt$mappingProgram
)
samples
samples
samples <- baqcomPackage::loadSamplesFile(
file = "samplesSingle.txt",
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, libraryType = "singleEnd"
)
samples
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd", fileType = NA,
program = opt$mappingProgram
)
opt$mappingProgram
samples <- baqcomPackage::loadSamplesFile(
file = "samplesPair.txt",
reads_folder = "01-CleanedReadsPair/",
column = opt$samplesColumn, libraryType = "pairEnd"
)
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair//",
column = opt$samplesColumn,
libraryType = "PairEnd", fileType = NA,
program = opt$mappingProgram
)
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair//",
column = opt$samplesColumn,
libraryType = "pairEnd", fileType = NA,
program = opt$mappingProgram
)
#mappingList <- function(samples, reads_folder, column){
mapping_list <- list()
reads_folder <- "01-CleanedReadsSingle/"
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
reads
qcquery <- baqcomPackage::createSampleList(samples = samples, reads_folder = opt$Raw_Folder, column = opt$samplesColumn, fileType = "fastq.gz", libraryType = opt$libraryType, program = "trimmomatic")
qcquery <- baqcomPackage::createSampleList(samples = samples, reads_folder = opt$Raw_Folder, column = opt$samplesColumn, fileType = NA, libraryType = opt$libraryType, program = "trimmomatic")
fileType = NULL
aceptedFileTypes <- c("bam", "sam")
if (!is.null(fileType) & !fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'bam' or 'sam' "))
}
is.null(fileType)
!is.null(fileType)
if (!is.null(fileType) & !fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'bam' or 'sam' "))
}
if (!is.null(fileType) & (!fileType %in% aceptedFileTypes)) {
stop(glue("File type ({fileType}) not found, please provide one of 'bam' or 'sam' "))
}
if (!is.null(fileType)){
if (!fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'bam' or 'sam' "))
}
}
library(baqcomPackage)
qcquery <- baqcomPackage::createSampleList(samples = samples, reads_folder = opt$Raw_Folder, column = opt$samplesColumn libraryType = opt$libraryType, program = "trimmomatic")
qcquery <- baqcomPackage::createSampleList(samples = samples, reads_folder = opt$Raw_Folder, column = opt$samplesColumn, libraryType = opt$libraryType, program = "trimmomatic")
opt$Raw_Folder
#qcList <- function(samples, reads_folder, column){
mapping_list <- list()
reads_folder <- "00-FastqSingle/"
reads_folder
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
reads
samples
samples <- "samplesSingle.txt"
i = 1
reads_folder <- "00-FastqSingle/"
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map
map$sampleName <-  samples[i,column]
column <- "SAMPLE_ID"
map$sampleName <-  samples[i,column]
i
samples[i,column]
opt$samplesColumn
map$sampleName <-  samples[i,1]
samples
samples
samples <- fread("samplesSingle.txt")
samples <- data.table::fread("samplesSingle.txt")
samples
map$sampleName <-  samples[i,column]
samples <- read.table("samplesSingle.txt")
map$sampleName <-  samples[i,column]
map
samples[i,column]
samples
samples <- read.table("samplesSingle.txt", header = TRUE)
samples[i,column]
map$sampleName <-  samples[i,column]
map
#map$SE <- map$SE[i]
map$SE <- samples[i,2]
map
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
reads
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
map
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
samples[i,2]
#map$SE <- map$SE[i]
map$SE <- samples[i]
map
#map$SE <- map$SE[i]
map$SE <- map$SE[i]
map
reads <- dir(path = file.path(reads_folder), pattern = "fastq.gz$", full.names = TRUE)
#reads <- dir(path=file.path(reads_folder, samples[i,column]), pattern = "fastq.gz$", full.names = TRUE)
map <- lapply(c("_SE"), grep, x = reads, value = TRUE)
names(map) <- c("SE")
map$sampleName <-  samples[i,column]
#map$SE <- map$SE[i]
map$SE <- map$SE[i]
map
library(baqcomPackage)
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair//",
column = opt$samplesColumn,
libraryType = "pairEnd", fileType = NA,
program = opt$mappingProgram
)
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd",
program = opt$mappingProgram
)
samples <- baqcomPackage::loadSamplesFile(
file = "samplesPair.txt",
reads_folder = "01-CleanedReadsPair/",
column = opt$samplesColumn, libraryType = "pairEnd"
)
samples
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair/",
column = opt$samplesColumn,
libraryType = "pairEnd",
program = opt$mappingProgram
)
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair/",
column = opt$samplesColumn,
libraryType = "pairEnd",
program = "bwa"
)
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair/",
column = opt$samplesColumn,
libraryType = "pairEnd",
program = "star"
)
createSampleList
#opt$cleanedFolder <- "00-Fastq/"
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn,
libraryType = opt$libraryType,program = opt$mappingProgram,
)
samples
MappingQuery
fileType
fileType <- "fastq.gz$"
reads <- dir(path = file.path(reads_folder), pattern = fileType, full.names = TRUE)
reads
library(baqcomPackage)
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = opt$libraryType, program = opt$mappingProgram
)
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = opt$libraryType, program = opt$mappingProgram
)
library(baqcomPackage)
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = opt$libraryType, program = opt$mappingProgram
)
library(baqcomPackage)
MappingQuery <- createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = opt$libraryType, program = opt$mappingProgram
)
MappingQuery <- baqcomPackage::createSampleList(
samples = samples,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = opt$libraryType, program = opt$mappingProgram
)
library(baqcomPackage)
# samples <- baqcomPackage::loadSamplesFile(
#     file = "samplesPair.txt",
#     reads_folder = "01-CleanedReadsPair/",
#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsPair/",
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = "pairEnd",
program = "star"
)
# samples <- baqcomPackage::loadSamplesFile(
#     file = "samplesPair.txt",
#     reads_folder = "01-CleanedReadsPair/",
#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = "singleEnd",
program = opt$mappingProgram
)
# samples <- baqcomPackage::loadSamplesFile(
#     file = "samplesPair.txt",
#     reads_folder = "01-CleanedReadsPair/",
#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq.gz$",
libraryType = "singleEnd",
program = opt$mappingProgram
)
# samples <- baqcomPackage::loadSamplesFile(
#     file = "samplesPair.txt",
#     reads_folder = "01-CleanedReadsPair/",
#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq",
libraryType = "singleEnd",
program = opt$mappingProgram
)
aceptedFileTypes <- c("bam", "sam", "fastq.gz$", "fastq$")
if (!is.null(fileType)){
if (!fileType %in% aceptedFileTypes) {
stop(glue("File type ({fileType}) not found, please provide one of 'bam', 'sam', 'fastq$' or 'fastq.gz$' "))
}
}
samples <- baqcomPackage::loadSamplesFile(
file = opt$samplesFile,
reads_folder = opt$cleanedFolder,
column = opt$samplesColumn, libraryType = opt$libraryType
)
# samples <- baqcomPackage::loadSamplesFile(
#     file = "samplesPair.txt",
#     reads_folder = "01-CleanedReadsPair/",
#     column = opt$samplesColumn, libraryType = "pairEnd"
# )
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq",
libraryType = "singleEnd",
program = opt$mappingProgram
)
library(baqcomPackage)
samples
samples <- baqcomPackage::loadSamplesFile(
file = "samplesSingle.txt",
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, libraryType = "singleEnd"
)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq",
libraryType = "singleEnd",
program = opt$mappingProgram
)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn, fileType = "fastq$",
libraryType = "singleEnd",
program = opt$mappingProgram
)
fileType <- "fastq.gz$"
reads <- dir(path = file.path(reads_folder), pattern = fileType, full.names = TRUE)
reads
reads_folder
library(baqcomPackage)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd",
program = opt$mappingProgram
)
opt$mappingProgram
library(baqcomPackage)
#
baqcomPackage::createSampleList(
samples = samples,
reads_folder = "01-CleanedReadsSingle/",
column = opt$samplesColumn,
libraryType = "singleEnd",
program = opt$mappingProgram
)
paste(
"unpigz", opt$cleanedFolder,
paste("-p", procs)
)
procs
paste(
"unpigz", opt$cleanedFolder,
paste("-p", "procs")
)
system(
paste("unpigz", paste0(opt$cleanedFolder, "/"),
paste("-p", "procs")
)
)
paste("unpigz", paste0(opt$cleanedFolder, "/"),
paste("-p", "procs")
)
system(
paste("unpigz", paste0(opt$cleanedFolder, "/*"),
paste("-p", procs)
)
)
if (!require(baqcomPackage)) {
devtools::install_github(repo = "git@github.com:hanielcedraz/baqcomPackage.git", upgrade = "never", quiet = TRUE, force = TRUE)
}
